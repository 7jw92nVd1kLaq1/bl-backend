# Generated by Django 5.1.1 on 2024-10-09 08:04

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('games', '0001_initial'),
        ('teams', '0004_remove_team_logo_url'),
    ]

    operations = [
        migrations.AlterField(
            model_name='gamechat',
            name='id',
            field=models.CharField(default='asdfasdfasdf', editable=False, max_length=100, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='gamechat',
            name='id',
            field=models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('game_id', models.PositiveBigIntegerField(help_text="Unique identifier for the game (e.g., '0022400061').", primary_key=True, serialize=False)),
                ('game_date_est', models.DateTimeField(help_text='Scheduled date and time of the game in Eastern Standard Time.')),
                ('game_sequence', models.IntegerField(help_text='Sequence number of the game within the season.')),
                ('game_status_id', models.IntegerField(help_text='Status identifier of the game (e.g., 1 for scheduled, 2 for in-progress).')),
                ('game_status_text', models.CharField(help_text="Descriptive status text (e.g., '7:30 pm ET').", max_length=50)),
                ('game_code', models.CharField(help_text="Game code (e.g., '20241022/NYKBOS').", max_length=50, unique=True)),
                ('season', models.CharField(help_text="Season year (e.g., '2024').", max_length=10)),
                ('live_period', models.IntegerField(help_text='Current live period of the game.')),
                ('live_pc_time', models.CharField(blank=True, help_text='Live PC time (if applicable).', max_length=10, null=True)),
                ('natl_tv_broadcaster_abbreviation', models.CharField(blank=True, help_text="National TV broadcaster abbreviation (e.g., 'TNT').", max_length=10, null=True)),
                ('home_tv_broadcaster_abbreviation', models.CharField(blank=True, help_text='Home TV broadcaster abbreviation.', max_length=10, null=True)),
                ('away_tv_broadcaster_abbreviation', models.CharField(blank=True, help_text='Away TV broadcaster abbreviation.', max_length=10, null=True)),
                ('live_period_time_bcast', models.CharField(blank=True, help_text="Live period time broadcast information (e.g., 'Q0 - TNT').", max_length=50, null=True)),
                ('arena_name', models.CharField(help_text="Name of the arena where the game is held (e.g., 'TD Garden').", max_length=100)),
                ('wh_status', models.BooleanField(default=False, help_text='WH status flag.')),
                ('wnba_commissioner_flag', models.BooleanField(default=False, help_text='WNBA commissioner flag.')),
                ('available_pt_available', models.BooleanField(default=False, help_text='Availability status of points.')),
                ('home_team', models.ForeignKey(help_text='Home team participating in the game.', on_delete=django.db.models.deletion.CASCADE, related_name='home_games', to='teams.team')),
                ('visitor_team', models.ForeignKey(help_text='Visitor team participating in the game.', on_delete=django.db.models.deletion.CASCADE, related_name='visitor_games', to='teams.team')),
            ],
            options={
                'verbose_name': 'Game',
                'verbose_name_plural': 'Games',
                'ordering': ['-game_date_est'],
            },
        ),
        migrations.AddField(
            model_name='gamechat',
            name='game',
            field=models.OneToOneField(default=0, on_delete=django.db.models.deletion.CASCADE, related_name='game_chat', to='games.game'),
            preserve_default=False,
        ),
        migrations.CreateModel(
            name='LineScore',
            fields=[
                ('line_score_id', models.AutoField(help_text='Unique identifier for the line score entry.', primary_key=True, serialize=False)),
                ('pts_qtr1', models.IntegerField(blank=True, help_text='Points scored in Quarter 1.', null=True)),
                ('pts_qtr2', models.IntegerField(blank=True, help_text='Points scored in Quarter 2.', null=True)),
                ('pts_qtr3', models.IntegerField(blank=True, help_text='Points scored in Quarter 3.', null=True)),
                ('pts_qtr4', models.IntegerField(blank=True, help_text='Points scored in Quarter 4.', null=True)),
                ('pts_ot1', models.IntegerField(blank=True, help_text='Points scored in Overtime 1.', null=True)),
                ('pts_ot2', models.IntegerField(blank=True, help_text='Points scored in Overtime 2.', null=True)),
                ('pts_ot3', models.IntegerField(blank=True, help_text='Points scored in Overtime 3.', null=True)),
                ('pts_ot4', models.IntegerField(blank=True, help_text='Points scored in Overtime 4.', null=True)),
                ('pts_ot5', models.IntegerField(blank=True, help_text='Points scored in Overtime 5.', null=True)),
                ('pts_ot6', models.IntegerField(blank=True, help_text='Points scored in Overtime 6.', null=True)),
                ('pts_ot7', models.IntegerField(blank=True, help_text='Points scored in Overtime 7.', null=True)),
                ('pts_ot8', models.IntegerField(blank=True, help_text='Points scored in Overtime 8.', null=True)),
                ('pts_ot9', models.IntegerField(blank=True, help_text='Points scored in Overtime 9.', null=True)),
                ('pts_ot10', models.IntegerField(blank=True, help_text='Points scored in Overtime 10.', null=True)),
                ('pts', models.IntegerField(blank=True, help_text='Total points scored by the team.', null=True)),
                ('fg_pct', models.DecimalField(blank=True, decimal_places=2, help_text='Field Goal Percentage (e.g., 45.67).', max_digits=5, null=True)),
                ('ft_pct', models.DecimalField(blank=True, decimal_places=2, help_text='Free Throw Percentage (e.g., 78.90).', max_digits=5, null=True)),
                ('fg3_pct', models.DecimalField(blank=True, decimal_places=2, help_text='3-Point Field Goal Percentage (e.g., 35.50).', max_digits=5, null=True)),
                ('ast', models.IntegerField(blank=True, help_text='Number of assists.', null=True)),
                ('reb', models.IntegerField(blank=True, help_text='Number of rebounds.', null=True)),
                ('tov', models.IntegerField(blank=True, help_text='Number of turnovers.', null=True)),
                ('game', models.ForeignKey(help_text='Associated game identifier.', on_delete=django.db.models.deletion.CASCADE, related_name='line_scores', to='games.game')),
                ('team', models.ForeignKey(help_text='Team identifier.', on_delete=django.db.models.deletion.CASCADE, related_name='line_scores', to='teams.team')),
            ],
            options={
                'verbose_name': 'Line Score',
                'verbose_name_plural': 'Line Scores',
                'db_table': 'LineScores',
                'ordering': ['game__game_date_est'],
                'indexes': [models.Index(fields=['game', 'team'], name='LineScores_game_id_38e2cc_idx')],
                'unique_together': {('game', 'team')},
            },
        ),
    ]
